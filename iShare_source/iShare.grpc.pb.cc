// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: iShare.proto

#include "iShare.pb.h"
#include "iShare.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace helloworld {

static const char* Synchronism_method_names[] = {
  "/helloworld.Synchronism/Syn",
};

std::unique_ptr< Synchronism::Stub> Synchronism::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Synchronism::Stub> stub(new Synchronism::Stub(channel));
  return stub;
}

Synchronism::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Syn_(Synchronism_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::helloworld::Syn_data>* Synchronism::Stub::SynRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
  return new ::grpc::ClientReader< ::helloworld::Syn_data>(channel_.get(), rpcmethod_Syn_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::Syn_data>* Synchronism::Stub::AsyncSynRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::Syn_data>(channel_.get(), cq, rpcmethod_Syn_, context, request, tag);
}

Synchronism::Service::Service() {
  (void)Synchronism_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Synchronism_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Synchronism::Service, ::helloworld::Inf, ::helloworld::Syn_data>(
          std::mem_fn(&Synchronism::Service::Syn), this)));
}

Synchronism::Service::~Service() {
}

::grpc::Status Synchronism::Service::Syn(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Syn_data>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Greeter_method_names[] = {
  "/helloworld.Greeter/SayHello",
  "/helloworld.Greeter/Login",
  "/helloworld.Greeter/Sign_up",
  "/helloworld.Greeter/User_inf",
  "/helloworld.Greeter/Search_username",
  "/helloworld.Greeter/Add_friend",
  "/helloworld.Greeter/Delete_friend",
  "/helloworld.Greeter/Create_share",
  "/helloworld.Greeter/Delete_bill",
  "/helloworld.Greeter/Obtain_bills",
  "/helloworld.Greeter/Send_Img",
  "/helloworld.Greeter/Receive_Img",
  "/helloworld.Greeter/Reset_Status",
  "/helloworld.Greeter/Send_request",
  "/helloworld.Greeter/Obtain_request",
  "/helloworld.Greeter/Obtain_requestLog",
  "/helloworld.Greeter/Obtain_requestLogHistory",
  "/helloworld.Greeter/Request_response",
  "/helloworld.Greeter/MakePayment",
  "/helloworld.Greeter/IgnoreRequestLog",
  "/helloworld.Greeter/Create_requestLog",
  "/helloworld.Greeter/Send_DeviceToken",
  "/helloworld.Greeter/Obtain_setting",
  "/helloworld.Greeter/Reset_setting",
  "/helloworld.Greeter/Reset_userInfo",
  "/helloworld.Greeter/Obtain_userInfo",
  "/helloworld.Greeter/Update_user_lastModified",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Greeter_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(Greeter_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sign_up_(Greeter_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_User_inf_(Greeter_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_username_(Greeter_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Add_friend_(Greeter_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_friend_(Greeter_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_share_(Greeter_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_bill_(Greeter_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Obtain_bills_(Greeter_method_names[9], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Send_Img_(Greeter_method_names[10], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Receive_Img_(Greeter_method_names[11], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Reset_Status_(Greeter_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_request_(Greeter_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Obtain_request_(Greeter_method_names[14], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Obtain_requestLog_(Greeter_method_names[15], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Obtain_requestLogHistory_(Greeter_method_names[16], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Request_response_(Greeter_method_names[17], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakePayment_(Greeter_method_names[18], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_IgnoreRequestLog_(Greeter_method_names[19], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_requestLog_(Greeter_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Send_DeviceToken_(Greeter_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Obtain_setting_(Greeter_method_names[22], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_setting_(Greeter_method_names[23], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_userInfo_(Greeter_method_names[24], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Obtain_userInfo_(Greeter_method_names[25], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_user_lastModified_(Greeter_method_names[26], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* Greeter::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::Status Greeter::Stub::Login(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::helloworld::Reply_inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>* Greeter::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::Status Greeter::Stub::Sign_up(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::helloworld::Reply_inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Sign_up_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>* Greeter::Stub::AsyncSign_upRaw(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>(channel_.get(), cq, rpcmethod_Sign_up_, context, request);
}

::grpc::Status Greeter::Stub::User_inf(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::User_detail* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_User_inf_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::User_detail>* Greeter::Stub::AsyncUser_infRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::User_detail>(channel_.get(), cq, rpcmethod_User_inf_, context, request);
}

::grpc::Status Greeter::Stub::Search_username(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Search_result* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Search_username_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Search_result>* Greeter::Stub::AsyncSearch_usernameRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Search_result>(channel_.get(), cq, rpcmethod_Search_username_, context, request);
}

::grpc::Status Greeter::Stub::Add_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Add_friend_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncAdd_friendRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Add_friend_, context, request);
}

::grpc::Status Greeter::Stub::Delete_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_friend_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncDelete_friendRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Delete_friend_, context, request);
}

::grpc::Status Greeter::Stub::Create_share(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Create_share_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncCreate_shareRaw(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Create_share_, context, request);
}

::grpc::Status Greeter::Stub::Delete_bill(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_bill_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncDelete_billRaw(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Delete_bill_, context, request);
}

::grpc::ClientReader< ::helloworld::Share_inf>* Greeter::Stub::Obtain_billsRaw(::grpc::ClientContext* context, const ::helloworld::Bill_request& request) {
  return new ::grpc::ClientReader< ::helloworld::Share_inf>(channel_.get(), rpcmethod_Obtain_bills_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::Share_inf>* Greeter::Stub::AsyncObtain_billsRaw(::grpc::ClientContext* context, const ::helloworld::Bill_request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::Share_inf>(channel_.get(), cq, rpcmethod_Obtain_bills_, context, request, tag);
}

::grpc::ClientWriter< ::helloworld::Image>* Greeter::Stub::Send_ImgRaw(::grpc::ClientContext* context, ::helloworld::Inf* response) {
  return new ::grpc::ClientWriter< ::helloworld::Image>(channel_.get(), rpcmethod_Send_Img_, context, response);
}

::grpc::ClientAsyncWriter< ::helloworld::Image>* Greeter::Stub::AsyncSend_ImgRaw(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::helloworld::Image>(channel_.get(), cq, rpcmethod_Send_Img_, context, response, tag);
}

::grpc::ClientReader< ::helloworld::Image>* Greeter::Stub::Receive_ImgRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request) {
  return new ::grpc::ClientReader< ::helloworld::Image>(channel_.get(), rpcmethod_Receive_Img_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::Image>* Greeter::Stub::AsyncReceive_ImgRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::Image>(channel_.get(), cq, rpcmethod_Receive_Img_, context, request, tag);
}

::grpc::Status Greeter::Stub::Reset_Status(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncReset_StatusRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Reset_Status_, context, request);
}

::grpc::Status Greeter::Stub::Send_request(::grpc::ClientContext* context, const ::helloworld::Request& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Send_request_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncSend_requestRaw(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Send_request_, context, request);
}

::grpc::ClientReader< ::helloworld::Request>* Greeter::Stub::Obtain_requestRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
  return new ::grpc::ClientReader< ::helloworld::Request>(channel_.get(), rpcmethod_Obtain_request_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::Request>* Greeter::Stub::AsyncObtain_requestRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::Request>(channel_.get(), cq, rpcmethod_Obtain_request_, context, request, tag);
}

::grpc::ClientReader< ::helloworld::Request>* Greeter::Stub::Obtain_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
  return new ::grpc::ClientReader< ::helloworld::Request>(channel_.get(), rpcmethod_Obtain_requestLog_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::Request>* Greeter::Stub::AsyncObtain_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::Request>(channel_.get(), cq, rpcmethod_Obtain_requestLog_, context, request, tag);
}

::grpc::ClientReader< ::helloworld::Request>* Greeter::Stub::Obtain_requestLogHistoryRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
  return new ::grpc::ClientReader< ::helloworld::Request>(channel_.get(), rpcmethod_Obtain_requestLogHistory_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::Request>* Greeter::Stub::AsyncObtain_requestLogHistoryRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::Request>(channel_.get(), cq, rpcmethod_Obtain_requestLogHistory_, context, request, tag);
}

::grpc::Status Greeter::Stub::Request_response(::grpc::ClientContext* context, const ::helloworld::Response& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Request_response_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncRequest_responseRaw(::grpc::ClientContext* context, const ::helloworld::Response& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Request_response_, context, request);
}

::grpc::ClientWriter< ::helloworld::BillPayment>* Greeter::Stub::MakePaymentRaw(::grpc::ClientContext* context, ::helloworld::Inf* response) {
  return new ::grpc::ClientWriter< ::helloworld::BillPayment>(channel_.get(), rpcmethod_MakePayment_, context, response);
}

::grpc::ClientAsyncWriter< ::helloworld::BillPayment>* Greeter::Stub::AsyncMakePaymentRaw(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::helloworld::BillPayment>(channel_.get(), cq, rpcmethod_MakePayment_, context, response, tag);
}

::grpc::Status Greeter::Stub::IgnoreRequestLog(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IgnoreRequestLog_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncIgnoreRequestLogRaw(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_IgnoreRequestLog_, context, request);
}

::grpc::Status Greeter::Stub::Create_requestLog(::grpc::ClientContext* context, const ::helloworld::Request& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Create_requestLog_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncCreate_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Create_requestLog_, context, request);
}

::grpc::Status Greeter::Stub::Send_DeviceToken(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Send_DeviceToken_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncSend_DeviceTokenRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Send_DeviceToken_, context, request);
}

::grpc::Status Greeter::Stub::Obtain_setting(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Setting* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Obtain_setting_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Setting>* Greeter::Stub::AsyncObtain_settingRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Setting>(channel_.get(), cq, rpcmethod_Obtain_setting_, context, request);
}

::grpc::Status Greeter::Stub::Reset_setting(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_setting_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncReset_settingRaw(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Reset_setting_, context, request);
}

::grpc::Status Greeter::Stub::Reset_userInfo(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_userInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncReset_userInfoRaw(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Reset_userInfo_, context, request);
}

::grpc::Status Greeter::Stub::Obtain_userInfo(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::UserInfo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Obtain_userInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::UserInfo>* Greeter::Stub::AsyncObtain_userInfoRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::UserInfo>(channel_.get(), cq, rpcmethod_Obtain_userInfo_, context, request);
}

::grpc::Status Greeter::Stub::Update_user_lastModified(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Inf* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Update_user_lastModified_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* Greeter::Stub::AsyncUpdate_user_lastModifiedRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>(channel_.get(), cq, rpcmethod_Update_user_lastModified_, context, request);
}

Greeter::Service::Service() {
  (void)Greeter_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::HelloRequest, ::helloworld::HelloReply>(
          std::mem_fn(&Greeter::Service::SayHello), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Login_m, ::helloworld::Reply_inf>(
          std::mem_fn(&Greeter::Service::Login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Sign_m, ::helloworld::Reply_inf>(
          std::mem_fn(&Greeter::Service::Sign_up), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::User_detail>(
          std::mem_fn(&Greeter::Service::User_inf), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Search_result>(
          std::mem_fn(&Greeter::Service::Search_username), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Repeated_string, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Add_friend), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Repeated_string, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Delete_friend), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Share_inf, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Create_share), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Share_inf, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Delete_bill), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[9],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Greeter::Service, ::helloworld::Bill_request, ::helloworld::Share_inf>(
          std::mem_fn(&Greeter::Service::Obtain_bills), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[10],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Greeter::Service, ::helloworld::Image, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Send_Img), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[11],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Greeter::Service, ::helloworld::Repeated_string, ::helloworld::Image>(
          std::mem_fn(&Greeter::Service::Receive_Img), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Reset_Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Request, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Send_request), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[14],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Request>(
          std::mem_fn(&Greeter::Service::Obtain_request), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[15],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Request>(
          std::mem_fn(&Greeter::Service::Obtain_requestLog), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[16],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Request>(
          std::mem_fn(&Greeter::Service::Obtain_requestLogHistory), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[17],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Response, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Request_response), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[18],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Greeter::Service, ::helloworld::BillPayment, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::MakePayment), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[19],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::IgnoreMessage, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::IgnoreRequestLog), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Request, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Create_requestLog), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Repeated_string, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Send_DeviceToken), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[22],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Setting>(
          std::mem_fn(&Greeter::Service::Obtain_setting), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[23],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Setting, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Reset_setting), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[24],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::UserInfo, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Reset_userInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[25],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::UserInfo>(
          std::mem_fn(&Greeter::Service::Obtain_userInfo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[26],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::Inf, ::helloworld::Inf>(
          std::mem_fn(&Greeter::Service::Update_user_lastModified), this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Login(::grpc::ServerContext* context, const ::helloworld::Login_m* request, ::helloworld::Reply_inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Sign_up(::grpc::ServerContext* context, const ::helloworld::Sign_m* request, ::helloworld::Reply_inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::User_inf(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::User_detail* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Search_username(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Search_result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Add_friend(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Delete_friend(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Create_share(::grpc::ServerContext* context, const ::helloworld::Share_inf* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Delete_bill(::grpc::ServerContext* context, const ::helloworld::Share_inf* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Obtain_bills(::grpc::ServerContext* context, const ::helloworld::Bill_request* request, ::grpc::ServerWriter< ::helloworld::Share_inf>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Send_Img(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::Image>* reader, ::helloworld::Inf* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Receive_Img(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::grpc::ServerWriter< ::helloworld::Image>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Reset_Status(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Send_request(::grpc::ServerContext* context, const ::helloworld::Request* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Obtain_request(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Request>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Obtain_requestLog(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Request>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Obtain_requestLogHistory(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Request>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Request_response(::grpc::ServerContext* context, const ::helloworld::Response* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::MakePayment(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::BillPayment>* reader, ::helloworld::Inf* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::IgnoreRequestLog(::grpc::ServerContext* context, const ::helloworld::IgnoreMessage* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Create_requestLog(::grpc::ServerContext* context, const ::helloworld::Request* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Send_DeviceToken(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Obtain_setting(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Setting* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Reset_setting(::grpc::ServerContext* context, const ::helloworld::Setting* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Reset_userInfo(::grpc::ServerContext* context, const ::helloworld::UserInfo* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Obtain_userInfo(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::UserInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Update_user_lastModified(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Inf* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace helloworld

