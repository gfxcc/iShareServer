// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: iShare.proto
#ifndef GRPC_iShare_2eproto__INCLUDED
#define GRPC_iShare_2eproto__INCLUDED

#include "iShare.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace helloworld {

class Greeter GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::helloworld::Reply_inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Reply_inf>> AsyncLogin(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Reply_inf>>(AsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Sign_up(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::helloworld::Reply_inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Reply_inf>> AsyncSign_up(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Reply_inf>>(AsyncSign_upRaw(context, request, cq));
    }
    virtual ::grpc::Status User_inf(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::User_detail* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::User_detail>> AsyncUser_inf(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::User_detail>>(AsyncUser_infRaw(context, request, cq));
    }
    virtual ::grpc::Status Search_username(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Search_result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Search_result>> AsyncSearch_username(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Search_result>>(AsyncSearch_usernameRaw(context, request, cq));
    }
    virtual ::grpc::Status Add_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncAdd_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncAdd_friendRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncDelete_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncDelete_friendRaw(context, request, cq));
    }
    virtual ::grpc::Status Create_share(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncCreate_share(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncCreate_shareRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete_bill(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncDelete_bill(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncDelete_billRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::helloworld::Inf, ::helloworld::Syn_data>> Syn(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::helloworld::Inf, ::helloworld::Syn_data>>(SynRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::Inf, ::helloworld::Syn_data>> AsyncSyn(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::Inf, ::helloworld::Syn_data>>(AsyncSynRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Share_inf>> Obtain_bills(::grpc::ClientContext* context, const ::helloworld::Bill_request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Share_inf>>(Obtain_billsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Share_inf>> AsyncObtain_bills(::grpc::ClientContext* context, const ::helloworld::Bill_request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Share_inf>>(AsyncObtain_billsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::helloworld::Image>> Send_Img(::grpc::ClientContext* context, ::helloworld::Inf* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::helloworld::Image>>(Send_ImgRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::Image>> AsyncSend_Img(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::Image>>(AsyncSend_ImgRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Image>> Receive_Img(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Image>>(Receive_ImgRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Image>> AsyncReceive_Img(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Image>>(AsyncReceive_ImgRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status Reset_Status(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncReset_Status(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncReset_StatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_request(::grpc::ClientContext* context, const ::helloworld::Request& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncSend_request(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncSend_requestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Request>> Obtain_request(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Request>>(Obtain_requestRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>> AsyncObtain_request(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>>(AsyncObtain_requestRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Request>> Obtain_requestLog(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Request>>(Obtain_requestLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>> AsyncObtain_requestLog(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>>(AsyncObtain_requestLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Request>> Obtain_requestLogHistory(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::helloworld::Request>>(Obtain_requestLogHistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>> AsyncObtain_requestLogHistory(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>>(AsyncObtain_requestLogHistoryRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status Request_response(::grpc::ClientContext* context, const ::helloworld::Response& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncRequest_response(::grpc::ClientContext* context, const ::helloworld::Response& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncRequest_responseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::helloworld::BillPayment>> MakePayment(::grpc::ClientContext* context, ::helloworld::Inf* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::helloworld::BillPayment>>(MakePaymentRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::BillPayment>> AsyncMakePayment(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::helloworld::BillPayment>>(AsyncMakePaymentRaw(context, response, cq, tag));
    }
    virtual ::grpc::Status IgnoreRequestLog(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncIgnoreRequestLog(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncIgnoreRequestLogRaw(context, request, cq));
    }
    virtual ::grpc::Status Create_requestLog(::grpc::ClientContext* context, const ::helloworld::Request& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncCreate_requestLog(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncCreate_requestLogRaw(context, request, cq));
    }
    virtual ::grpc::Status Send_DeviceToken(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncSend_DeviceToken(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncSend_DeviceTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status Obtain_setting(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Setting* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Setting>> AsyncObtain_setting(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Setting>>(AsyncObtain_settingRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset_setting(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncReset_setting(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncReset_settingRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset_userInfo(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncReset_userInfo(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncReset_userInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status Obtain_userInfo(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::UserInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UserInfo>> AsyncObtain_userInfo(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UserInfo>>(AsyncObtain_userInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status Update_user_lastModified(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Inf* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>> AsyncUpdate_user_lastModified(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>>(AsyncUpdate_user_lastModifiedRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Reply_inf>* AsyncLoginRaw(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Reply_inf>* AsyncSign_upRaw(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::User_detail>* AsyncUser_infRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Search_result>* AsyncSearch_usernameRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncAdd_friendRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncDelete_friendRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncCreate_shareRaw(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncDelete_billRaw(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::helloworld::Inf, ::helloworld::Syn_data>* SynRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::helloworld::Inf, ::helloworld::Syn_data>* AsyncSynRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::Share_inf>* Obtain_billsRaw(::grpc::ClientContext* context, const ::helloworld::Bill_request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::Share_inf>* AsyncObtain_billsRaw(::grpc::ClientContext* context, const ::helloworld::Bill_request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::helloworld::Image>* Send_ImgRaw(::grpc::ClientContext* context, ::helloworld::Inf* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::helloworld::Image>* AsyncSend_ImgRaw(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::Image>* Receive_ImgRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::Image>* AsyncReceive_ImgRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncReset_StatusRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncSend_requestRaw(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::Request>* Obtain_requestRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>* AsyncObtain_requestRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::Request>* Obtain_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>* AsyncObtain_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::helloworld::Request>* Obtain_requestLogHistoryRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::helloworld::Request>* AsyncObtain_requestLogHistoryRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncRequest_responseRaw(::grpc::ClientContext* context, const ::helloworld::Response& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::helloworld::BillPayment>* MakePaymentRaw(::grpc::ClientContext* context, ::helloworld::Inf* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::helloworld::BillPayment>* AsyncMakePaymentRaw(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncIgnoreRequestLogRaw(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncCreate_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncSend_DeviceTokenRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Setting>* AsyncObtain_settingRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncReset_settingRaw(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncReset_userInfoRaw(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::UserInfo>* AsyncObtain_userInfoRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::helloworld::Inf>* AsyncUpdate_user_lastModifiedRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::helloworld::Reply_inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>> AsyncLogin(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>>(AsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Sign_up(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::helloworld::Reply_inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>> AsyncSign_up(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>>(AsyncSign_upRaw(context, request, cq));
    }
    ::grpc::Status User_inf(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::User_detail* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::User_detail>> AsyncUser_inf(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::User_detail>>(AsyncUser_infRaw(context, request, cq));
    }
    ::grpc::Status Search_username(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Search_result* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Search_result>> AsyncSearch_username(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Search_result>>(AsyncSearch_usernameRaw(context, request, cq));
    }
    ::grpc::Status Add_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncAdd_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncAdd_friendRaw(context, request, cq));
    }
    ::grpc::Status Delete_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncDelete_friend(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncDelete_friendRaw(context, request, cq));
    }
    ::grpc::Status Create_share(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncCreate_share(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncCreate_shareRaw(context, request, cq));
    }
    ::grpc::Status Delete_bill(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncDelete_bill(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncDelete_billRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::helloworld::Inf, ::helloworld::Syn_data>> Syn(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::helloworld::Inf, ::helloworld::Syn_data>>(SynRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::helloworld::Inf, ::helloworld::Syn_data>> AsyncSyn(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::helloworld::Inf, ::helloworld::Syn_data>>(AsyncSynRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::Share_inf>> Obtain_bills(::grpc::ClientContext* context, const ::helloworld::Bill_request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::Share_inf>>(Obtain_billsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Share_inf>> AsyncObtain_bills(::grpc::ClientContext* context, const ::helloworld::Bill_request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Share_inf>>(AsyncObtain_billsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::helloworld::Image>> Send_Img(::grpc::ClientContext* context, ::helloworld::Inf* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::helloworld::Image>>(Send_ImgRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::Image>> AsyncSend_Img(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::Image>>(AsyncSend_ImgRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::Image>> Receive_Img(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::Image>>(Receive_ImgRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Image>> AsyncReceive_Img(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Image>>(AsyncReceive_ImgRaw(context, request, cq, tag));
    }
    ::grpc::Status Reset_Status(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncReset_Status(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncReset_StatusRaw(context, request, cq));
    }
    ::grpc::Status Send_request(::grpc::ClientContext* context, const ::helloworld::Request& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncSend_request(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncSend_requestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::Request>> Obtain_request(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::Request>>(Obtain_requestRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Request>> AsyncObtain_request(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Request>>(AsyncObtain_requestRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::Request>> Obtain_requestLog(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::Request>>(Obtain_requestLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Request>> AsyncObtain_requestLog(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Request>>(AsyncObtain_requestLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::helloworld::Request>> Obtain_requestLogHistory(::grpc::ClientContext* context, const ::helloworld::Inf& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::helloworld::Request>>(Obtain_requestLogHistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Request>> AsyncObtain_requestLogHistory(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::helloworld::Request>>(AsyncObtain_requestLogHistoryRaw(context, request, cq, tag));
    }
    ::grpc::Status Request_response(::grpc::ClientContext* context, const ::helloworld::Response& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncRequest_response(::grpc::ClientContext* context, const ::helloworld::Response& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncRequest_responseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::helloworld::BillPayment>> MakePayment(::grpc::ClientContext* context, ::helloworld::Inf* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::helloworld::BillPayment>>(MakePaymentRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::BillPayment>> AsyncMakePayment(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::helloworld::BillPayment>>(AsyncMakePaymentRaw(context, response, cq, tag));
    }
    ::grpc::Status IgnoreRequestLog(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncIgnoreRequestLog(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncIgnoreRequestLogRaw(context, request, cq));
    }
    ::grpc::Status Create_requestLog(::grpc::ClientContext* context, const ::helloworld::Request& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncCreate_requestLog(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncCreate_requestLogRaw(context, request, cq));
    }
    ::grpc::Status Send_DeviceToken(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncSend_DeviceToken(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncSend_DeviceTokenRaw(context, request, cq));
    }
    ::grpc::Status Obtain_setting(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Setting* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Setting>> AsyncObtain_setting(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Setting>>(AsyncObtain_settingRaw(context, request, cq));
    }
    ::grpc::Status Reset_setting(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncReset_setting(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncReset_settingRaw(context, request, cq));
    }
    ::grpc::Status Reset_userInfo(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncReset_userInfo(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncReset_userInfoRaw(context, request, cq));
    }
    ::grpc::Status Obtain_userInfo(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::UserInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::UserInfo>> AsyncObtain_userInfo(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::UserInfo>>(AsyncObtain_userInfoRaw(context, request, cq));
    }
    ::grpc::Status Update_user_lastModified(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::helloworld::Inf* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>> AsyncUpdate_user_lastModified(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>>(AsyncUpdate_user_lastModifiedRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>* AsyncLoginRaw(::grpc::ClientContext* context, const ::helloworld::Login_m& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Reply_inf>* AsyncSign_upRaw(::grpc::ClientContext* context, const ::helloworld::Sign_m& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::User_detail>* AsyncUser_infRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Search_result>* AsyncSearch_usernameRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncAdd_friendRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncDelete_friendRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncCreate_shareRaw(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncDelete_billRaw(::grpc::ClientContext* context, const ::helloworld::Share_inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReaderWriter< ::helloworld::Inf, ::helloworld::Syn_data>* SynRaw(::grpc::ClientContext* context) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReaderWriter< ::helloworld::Inf, ::helloworld::Syn_data>* AsyncSynRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::helloworld::Share_inf>* Obtain_billsRaw(::grpc::ClientContext* context, const ::helloworld::Bill_request& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::helloworld::Share_inf>* AsyncObtain_billsRaw(::grpc::ClientContext* context, const ::helloworld::Bill_request& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientWriter< ::helloworld::Image>* Send_ImgRaw(::grpc::ClientContext* context, ::helloworld::Inf* response) GRPC_OVERRIDE;
    ::grpc::ClientAsyncWriter< ::helloworld::Image>* AsyncSend_ImgRaw(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::helloworld::Image>* Receive_ImgRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::helloworld::Image>* AsyncReceive_ImgRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncReset_StatusRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncSend_requestRaw(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::helloworld::Request>* Obtain_requestRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::helloworld::Request>* AsyncObtain_requestRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::helloworld::Request>* Obtain_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::helloworld::Request>* AsyncObtain_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::helloworld::Request>* Obtain_requestLogHistoryRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::helloworld::Request>* AsyncObtain_requestLogHistoryRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncRequest_responseRaw(::grpc::ClientContext* context, const ::helloworld::Response& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientWriter< ::helloworld::BillPayment>* MakePaymentRaw(::grpc::ClientContext* context, ::helloworld::Inf* response) GRPC_OVERRIDE;
    ::grpc::ClientAsyncWriter< ::helloworld::BillPayment>* AsyncMakePaymentRaw(::grpc::ClientContext* context, ::helloworld::Inf* response, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncIgnoreRequestLogRaw(::grpc::ClientContext* context, const ::helloworld::IgnoreMessage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncCreate_requestLogRaw(::grpc::ClientContext* context, const ::helloworld::Request& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncSend_DeviceTokenRaw(::grpc::ClientContext* context, const ::helloworld::Repeated_string& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Setting>* AsyncObtain_settingRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncReset_settingRaw(::grpc::ClientContext* context, const ::helloworld::Setting& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncReset_userInfoRaw(::grpc::ClientContext* context, const ::helloworld::UserInfo& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::UserInfo>* AsyncObtain_userInfoRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::helloworld::Inf>* AsyncUpdate_user_lastModifiedRaw(::grpc::ClientContext* context, const ::helloworld::Inf& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SayHello_;
    const ::grpc::RpcMethod rpcmethod_Login_;
    const ::grpc::RpcMethod rpcmethod_Sign_up_;
    const ::grpc::RpcMethod rpcmethod_User_inf_;
    const ::grpc::RpcMethod rpcmethod_Search_username_;
    const ::grpc::RpcMethod rpcmethod_Add_friend_;
    const ::grpc::RpcMethod rpcmethod_Delete_friend_;
    const ::grpc::RpcMethod rpcmethod_Create_share_;
    const ::grpc::RpcMethod rpcmethod_Delete_bill_;
    const ::grpc::RpcMethod rpcmethod_Syn_;
    const ::grpc::RpcMethod rpcmethod_Obtain_bills_;
    const ::grpc::RpcMethod rpcmethod_Send_Img_;
    const ::grpc::RpcMethod rpcmethod_Receive_Img_;
    const ::grpc::RpcMethod rpcmethod_Reset_Status_;
    const ::grpc::RpcMethod rpcmethod_Send_request_;
    const ::grpc::RpcMethod rpcmethod_Obtain_request_;
    const ::grpc::RpcMethod rpcmethod_Obtain_requestLog_;
    const ::grpc::RpcMethod rpcmethod_Obtain_requestLogHistory_;
    const ::grpc::RpcMethod rpcmethod_Request_response_;
    const ::grpc::RpcMethod rpcmethod_MakePayment_;
    const ::grpc::RpcMethod rpcmethod_IgnoreRequestLog_;
    const ::grpc::RpcMethod rpcmethod_Create_requestLog_;
    const ::grpc::RpcMethod rpcmethod_Send_DeviceToken_;
    const ::grpc::RpcMethod rpcmethod_Obtain_setting_;
    const ::grpc::RpcMethod rpcmethod_Reset_setting_;
    const ::grpc::RpcMethod rpcmethod_Reset_userInfo_;
    const ::grpc::RpcMethod rpcmethod_Obtain_userInfo_;
    const ::grpc::RpcMethod rpcmethod_Update_user_lastModified_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::helloworld::Login_m* request, ::helloworld::Reply_inf* response);
    virtual ::grpc::Status Sign_up(::grpc::ServerContext* context, const ::helloworld::Sign_m* request, ::helloworld::Reply_inf* response);
    virtual ::grpc::Status User_inf(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::User_detail* response);
    virtual ::grpc::Status Search_username(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Search_result* response);
    virtual ::grpc::Status Add_friend(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Delete_friend(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Create_share(::grpc::ServerContext* context, const ::helloworld::Share_inf* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Delete_bill(::grpc::ServerContext* context, const ::helloworld::Share_inf* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Syn(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::helloworld::Syn_data, ::helloworld::Inf>* stream);
    virtual ::grpc::Status Obtain_bills(::grpc::ServerContext* context, const ::helloworld::Bill_request* request, ::grpc::ServerWriter< ::helloworld::Share_inf>* writer);
    virtual ::grpc::Status Send_Img(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::Image>* reader, ::helloworld::Inf* response);
    virtual ::grpc::Status Receive_Img(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::grpc::ServerWriter< ::helloworld::Image>* writer);
    virtual ::grpc::Status Reset_Status(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Send_request(::grpc::ServerContext* context, const ::helloworld::Request* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Obtain_request(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Request>* writer);
    virtual ::grpc::Status Obtain_requestLog(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Request>* writer);
    virtual ::grpc::Status Obtain_requestLogHistory(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::grpc::ServerWriter< ::helloworld::Request>* writer);
    virtual ::grpc::Status Request_response(::grpc::ServerContext* context, const ::helloworld::Response* request, ::helloworld::Inf* response);
    virtual ::grpc::Status MakePayment(::grpc::ServerContext* context, ::grpc::ServerReader< ::helloworld::BillPayment>* reader, ::helloworld::Inf* response);
    virtual ::grpc::Status IgnoreRequestLog(::grpc::ServerContext* context, const ::helloworld::IgnoreMessage* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Create_requestLog(::grpc::ServerContext* context, const ::helloworld::Request* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Send_DeviceToken(::grpc::ServerContext* context, const ::helloworld::Repeated_string* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Obtain_setting(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Setting* response);
    virtual ::grpc::Status Reset_setting(::grpc::ServerContext* context, const ::helloworld::Setting* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Reset_userInfo(::grpc::ServerContext* context, const ::helloworld::UserInfo* request, ::helloworld::Inf* response);
    virtual ::grpc::Status Obtain_userInfo(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::UserInfo* response);
    virtual ::grpc::Status Update_user_lastModified(::grpc::ServerContext* context, const ::helloworld::Inf* request, ::helloworld::Inf* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    std::unique_ptr< ::grpc::RpcService> service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestSayHello(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestLogin(::grpc::ServerContext* context, ::helloworld::Login_m* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Reply_inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSign_up(::grpc::ServerContext* context, ::helloworld::Sign_m* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Reply_inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestUser_inf(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::User_detail>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSearch_username(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Search_result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestAdd_friend(::grpc::ServerContext* context, ::helloworld::Repeated_string* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestDelete_friend(::grpc::ServerContext* context, ::helloworld::Repeated_string* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestCreate_share(::grpc::ServerContext* context, ::helloworld::Share_inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestDelete_bill(::grpc::ServerContext* context, ::helloworld::Share_inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSyn(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::helloworld::Syn_data, ::helloworld::Inf>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestObtain_bills(::grpc::ServerContext* context, ::helloworld::Bill_request* request, ::grpc::ServerAsyncWriter< ::helloworld::Share_inf>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSend_Img(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::helloworld::Inf, ::helloworld::Image>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReceive_Img(::grpc::ServerContext* context, ::helloworld::Repeated_string* request, ::grpc::ServerAsyncWriter< ::helloworld::Image>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReset_Status(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSend_request(::grpc::ServerContext* context, ::helloworld::Request* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestObtain_request(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncWriter< ::helloworld::Request>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestObtain_requestLog(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncWriter< ::helloworld::Request>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestObtain_requestLogHistory(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncWriter< ::helloworld::Request>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestRequest_response(::grpc::ServerContext* context, ::helloworld::Response* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMakePayment(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::helloworld::Inf, ::helloworld::BillPayment>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestIgnoreRequestLog(::grpc::ServerContext* context, ::helloworld::IgnoreMessage* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestCreate_requestLog(::grpc::ServerContext* context, ::helloworld::Request* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSend_DeviceToken(::grpc::ServerContext* context, ::helloworld::Repeated_string* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestObtain_setting(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Setting>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReset_setting(::grpc::ServerContext* context, ::helloworld::Setting* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReset_userInfo(::grpc::ServerContext* context, ::helloworld::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestObtain_userInfo(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::UserInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestUpdate_user_lastModified(::grpc::ServerContext* context, ::helloworld::Inf* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::Inf>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace helloworld


#endif  // GRPC_iShare_2eproto__INCLUDED
